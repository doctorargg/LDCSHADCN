-- Create table for storing AI-generated email responses
CREATE TABLE IF NOT EXISTS ai_email_responses (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  lead_id UUID NOT NULL REFERENCES form_submissions(id) ON DELETE CASCADE,
  subject TEXT NOT NULL,
  html_content TEXT NOT NULL,
  text_content TEXT NOT NULL,
  inquiry_type VARCHAR(50) NOT NULL,
  ai_generated BOOLEAN DEFAULT true,
  sent_at TIMESTAMPTZ,
  reviewed_at TIMESTAMPTZ,
  reviewed_by VARCHAR(255),
  approved BOOLEAN,
  notes TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for better query performance
CREATE INDEX idx_ai_email_responses_lead_id ON ai_email_responses(lead_id);
CREATE INDEX idx_ai_email_responses_sent_at ON ai_email_responses(sent_at);
CREATE INDEX idx_ai_email_responses_inquiry_type ON ai_email_responses(inquiry_type);

-- Enable Row Level Security
ALTER TABLE ai_email_responses ENABLE ROW LEVEL SECURITY;

-- Create RLS policies (adjust based on your authentication needs)
CREATE POLICY "Enable read access for authenticated users" ON ai_email_responses
  FOR SELECT USING (auth.role() = 'authenticated');

CREATE POLICY "Enable insert for service role" ON ai_email_responses
  FOR INSERT WITH CHECK (auth.role() = 'service_role');

CREATE POLICY "Enable update for authenticated users" ON ai_email_responses
  FOR UPDATE USING (auth.role() = 'authenticated');

-- Create function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to automatically update updated_at
CREATE TRIGGER update_ai_email_responses_updated_at BEFORE UPDATE
  ON ai_email_responses FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Add comment for documentation
COMMENT ON TABLE ai_email_responses IS 'Stores AI-generated email responses sent to leads';
COMMENT ON COLUMN ai_email_responses.lead_id IS 'Foreign key reference to the form_submissions table';
COMMENT ON COLUMN ai_email_responses.subject IS 'Email subject line';
COMMENT ON COLUMN ai_email_responses.html_content IS 'HTML version of the email';
COMMENT ON COLUMN ai_email_responses.text_content IS 'Plain text version of the email';
COMMENT ON COLUMN ai_email_responses.inquiry_type IS 'Type of inquiry (e.g., generalInquiry, functionalMedicine, etc.)';
COMMENT ON COLUMN ai_email_responses.ai_generated IS 'Whether this response was generated by AI';
COMMENT ON COLUMN ai_email_responses.sent_at IS 'When the email was actually sent';
COMMENT ON COLUMN ai_email_responses.reviewed_at IS 'When an admin reviewed this response';
COMMENT ON COLUMN ai_email_responses.reviewed_by IS 'Email or ID of the admin who reviewed';
COMMENT ON COLUMN ai_email_responses.approved IS 'Whether the response was approved after review';
COMMENT ON COLUMN ai_email_responses.notes IS 'Admin notes about the response';